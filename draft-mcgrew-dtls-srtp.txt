


Network Working Group                                          D. McGrew
Internet-Draft                                             Cisco Systems
Expires:  September 21, 2006                                 E. Rescorla
                                                       Network Resonance
                                                          March 20, 2006


   Secure Real-time Transport Protocol (SRTP) Extensions for Datagram
                    Transport Layer Security (DTLS)
                      draft-mcgrew-tls-srtp-00.txt

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on September 21, 2006.

Copyright Notice

   Copyright (C) The Internet Society (2006).

Abstract

   Secure Real-time Transport Protocol (SRTP) is a profile of the Real-
   time Transport Protocol which can provide confidentiality, message
   authentication, and replay protection to the RTP traffic and to the
   control traffic for RTP, the Real-time Transport Control Protocol
   (RTCP).  This document describes a method of using DTLS key
   management for SRTP by creating a new extension which indicates that



McGrew & Rescorla      Expires September 21, 2006               [Page 1]

Internet-Draft           SRTP Extension for DTLS              March 2006


   SRTP is to be used for data encryption.


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Conventions Used In This Document  . . . . . . . . . . . . . .  3
   3.  Protocol Description . . . . . . . . . . . . . . . . . . . . .  3
     3.1.  Usage Model  . . . . . . . . . . . . . . . . . . . . . . .  3
     3.2.  Extension Definition . . . . . . . . . . . . . . . . . . .  4
     3.3.  Key Derivation . . . . . . . . . . . . . . . . . . . . . .  5
     3.4.  Key Usage Limitations  . . . . . . . . . . . . . . . . . .  6
     3.5.  Data Protection  . . . . . . . . . . . . . . . . . . . . .  6
       3.5.1.  Transmission . . . . . . . . . . . . . . . . . . . . .  6
       3.5.2.  Reception  . . . . . . . . . . . . . . . . . . . . . .  7
     3.6.  Rehandshake and Re-key . . . . . . . . . . . . . . . . . .  8
   4.  Security Considerations  . . . . . . . . . . . . . . . . . . .  8
     4.1.  Security of Negotiation  . . . . . . . . . . . . . . . . .  8
     4.2.  Security of Established Keys . . . . . . . . . . . . . . .  9
     4.3.  Framing Confusion  . . . . . . . . . . . . . . . . . . . .  9
     4.4.  Sequence Number Interactions . . . . . . . . . . . . . . .  9
       4.4.1.  Alerts . . . . . . . . . . . . . . . . . . . . . . . .  9
       4.4.2.  Rehandshake  . . . . . . . . . . . . . . . . . . . . .  9
   5.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 10
   6.  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 10
   7.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 10
     7.1.  Normative References . . . . . . . . . . . . . . . . . . . 10
     7.2.  Informational References . . . . . . . . . . . . . . . . . 11
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 12
   Intellectual Property and Copyright Statements . . . . . . . . . . 13





















McGrew & Rescorla      Expires September 21, 2006               [Page 2]

Internet-Draft           SRTP Extension for DTLS              March 2006


1.  Introduction

   Secure Real-time Transport Protocol (SRTP) [9] is a profile of the
   Real-time Transport Protocol (RTP) [1] which can provide
   confidentiality, message authentication, and replay protection to RTP
   traffic and to the control traffic for RTP, the Real-time Transport
   Control Protocol (RTCP).  SRTP does not provide key management
   functionality but instead depends on external key management.

   Datagram Transport Layer Security (DTLS) [4] is a channel security
   protocol that offers integrated key management, parameter
   negotiation, and secure data transfer.  Because DTLS's data transfer
   protocol is generic, it is less highly optimized for use with RTP
   than is SRTP, which has been specifically tuned for that purpose.
   This document describes an SRTP extension for DTLS which combine the
   the performance and encryption flexibility benefits of SRTP with the
   flexibility and convenience of DTLS's integrated key and association
   management.  This extension MUST only be used when the data being
   transported is RTP and RTCP [3].

   The key points of our approach are as follows:
   o  New mode negotiated via DTLS extension mechanism.
   o  Application data is protected using SRTP.
   o  Other content types are protected using the usual DTLS record
      format.
   o  The DTLS handshake is used to establish keying material and
      algorithm parameters for SRTP.
   o  The DTLS pseudo-random function (PRF) is used to generate the SRTP
      traffic encryption keys.
   o  The DTLS handshake is used to negotiate the algorithms.
   The next section provides details of the new extension.


2.  Conventions Used In This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [2].


3.  Protocol Description

   In this section we provide a description of the new protocol elements
   introduced by this proposal.

3.1.  Usage Model

   Our general model is to have a single DTLS association (called a



McGrew & Rescorla      Expires September 21, 2006               [Page 3]

Internet-Draft           SRTP Extension for DTLS              March 2006


   "connection" in TLS jargon) for each media channel (pair of
   unidirectional SRTP flows).  [TODO:  is this the right terminology?]
   A description of how to indicate this in SIP and SDP and authenticate
   the endpoints using fingerprints can be found in [6] and [5].

   In a naive implementation, this results in new DTLS session
   establishment (complete with public key cryptography) for each media
   channel.  A superior approach is to establish single DTLS connection
   in order to create the DTLS session and then use DTLS session
   resumption to establish DTLS connections for any additional media
   channels.  This allows the amortization of the expensive public key
   cryptography operations over multiple handshakes.

   One issue that arises in this context is multiple RTP sender over the
   same DTLS channel.  In order to avoid the "two-time pad" problem,
   each sender over the same DTLS association MUST use a distinct SSRC
   value, as described in Section 9.1 of RFC 3711.

3.2.  Extension Definition

   [TODO:  When we discussed this we had discussed using a new cipher
   suite.  However, after thinking about it a bit, I concluded an
   extension was cleaner (and at least less text for me to write.)  If
   you feel differently, let me know and we can totally do it the other
   way.]

   In order to negotiate the use of SRTP data protection, clients MAY
   include an extension of type "use_srtp" in the extended client hello.
   The "extension_data" field of this extension shall be empty.

   Servers that receive an extended hello containing a "use_srtp"
   extension, MAY agree to use SRTP by including an extension of type
   "use_srtp", with empty "extension_data", in the extended server
   hello.  This process is shown below.

















McGrew & Rescorla      Expires September 21, 2006               [Page 4]

Internet-Draft           SRTP Extension for DTLS              March 2006


         Client                                               Server

         ClientHello + use_srtp       -------->
                                              ServerHello + use_srtp
                                                        Certificate*
                                                  ServerKeyExchange*
                                                 CertificateRequest*
                                      <--------      ServerHelloDone
         Certificate*
         ClientKeyExchange
         CertificateVerify*
         [ChangeCipherSpec]
         Finished                     -------->
                                                  [ChangeCipherSpec]
                                      <--------             Finished
         SRTP packets                 <------->         SRTP packets

   Once the "use_srtp" extension is negotiated, packets of type
   "application_data" in the newly negotiated association (i.e., after
   the change_cipher_spec) SHOULD be protected using SRTP.  [TODO:  Note
   that you actually can in theory intermix DTLS "application_data"
   traffic as well.  Is there any value here?]  Records of type other
   than "application_data" MUST use ordinary DTLS framing.  When the
   "use_srtp" extension is in effect, implementations MUST NOT place
   more than one "record" per datagram.  (This is only meaningful from
   the perspective of DTLS because SRTP is inherently oriented towards
   one payload per packet, but is stated purely for clarification.)

   The SRTP cipher and MAC algorithm used correspond directly to those
   in the negotiated DTLS cipher suite with the following exception:
   DTLS cipher suites which are block ciphers in CBC mode are used in
   CTR mode with SRTP (but still in CBC mode with DTLS records).  DTLS
   only defines block ciphers so there is no concern about the use of
   stream ciphers.

   [TODO:  Note that this precludes the use of F8 mode.  I don't have a
   good sense of whether this is important or not.  This is obviously a
   drawback of this extension approach.  We could have the extension
   above indicate the block cipher mode (CTR or F8) if that's important
   to preserve.]

3.3.  Key Derivation

   When SRTP mode is in effect, different keys are used for ordinary
   DTLS record protection and SRTP record protection.  These keys are
   generated as additional keying material at the end of the DTLS key
   block.  Thus, the key block becomes:




McGrew & Rescorla      Expires September 21, 2006               [Page 5]

Internet-Draft           SRTP Extension for DTLS              March 2006


        client_write_MAC_secret[SecurityParameters.hash_size]
        server_write_MAC_secret[SecurityParameters.hash_size]
        client_write_key[SecurityParameters.key_material_length]
        server_write_key[SecurityParameters.key_material_length]
        srtp_client_write_MAC_secret[SecurityParameters.hash_size]
        srtp_server_write_MAC_secret[SecurityParameters.hash_size]
        srtp_client_write_key[SecurityParameters.key_material_length]
        srtp_server_write_key[SecurityParameters.key_material_length]
        srtp_client_write_salt_secret[SecurityParameters.salt_size]
        srtp_server_write_salt_secret[SecurityParameters.salt_size]

   [TODO:  I think we can just use the same key sizes for the algorithms
   as does DTLS.  Is there a problem here I missed?]

   The last six values are mapped directly onto the SRTP values for each
   transform.  The following table shows the mapping in the client to
   server direction:

               +------------------------------+------------+
               | DTLS Value                   | SRTP Value |
               +------------------------------+------------+
               | srtp_client_write_MAC_secret |        k_a |
               | srtp_client_write_key        |        k_e |
               | srtp_client_write_salt       |        k_s |
               +------------------------------+------------+

   Because we generate the SRTP keys directly, the SRTP key derivation
   mechanism described in Section 4.3 of [9] is not used.

3.4.  Key Usage Limitations

   [TODO:  David McGrew]

3.5.  Data Protection

   Once the DTLS handshake has completed the peers can send RTP and RTCP
   over the newly created channel.  We describe the transmission process
   first followed by the reception process.

3.5.1.  Transmission

   DTLS and TLS define a number of record content types.  In ordinary
   TLS/DTLS, all data is protected using the same record encoding and
   mechanisms.  When the mechanism described in this document is in
   effect, this is modified so that data of type "application_data"
   (used to transport data traffic) is encrypted using SRTP rather than
   the standard TLS record encoding.




McGrew & Rescorla      Expires September 21, 2006               [Page 6]

Internet-Draft           SRTP Extension for DTLS              March 2006


   When a user of DTLS wishes to send an RTP packet in SRTP mode it
   delivers it to the DTLS implementation as a single write of type
   "application_data".  The DTLS implementation then invokes the
   processing described in RFC 3711 Sections 3 and 4.  The resulting
   SRTP packet is then sent directly on the wire as a single datagram
   with no DTLS framing.  This provides the same bits on the wire
   representation as SRTP for the data.  Note that the RTP sequence
   number rather than the DTLS sequence number is used for these
   packets.

   [TODO:  How fixed is the SRTP MAC?  Could we include the DTLS record
   header in the MAC somehow just to make absolutely sure that we know
   the content type?  That seems like it would be nice from a security
   perspective for maximal ambiguity, even though the different keys
   thing does provide a fair amount of insulation.]

3.5.2.  Reception

   In ordinary DTLS, the receiver can unambiguously determine the type
   of the record from the DTLS record header.  However when SRTP and
   DTLS data is mixed over the same channel, the recipient must first
   determine which decryption mechanism to use.  This can be done
   unambiguously using the following procedure.
   1.  Assume that the datagram is a DTLS record.
   2.  If the first byte does not match a known DTLS content type go to
       step 6.
   3.  If the version field does not match the current version go to
       step 6.
   4.  If the length does not match the rest of the record, go to step
       6.
   5.  Attempt to decrypt and verify the DTLS record--omitting the
       replay check.  If this process succeeds, the record must be DTLS.
       Deliver it to the rest of the DTLS implementation.
   6.  Assume that the datagram is an SRTP packet and follow the
       procedure of Section 3 of RFC 3711.  Note that the replay
       detection check specified in DTLS SHOULD NOT be done for these
       packets.  If anti-replay is desired SRTP anti-replay mechanisms
       SHOULD be used.

   The first byte of a DTLS packet is "Type" which can currently have
   values of 20,21,22, and 23 as defined in ContentType declaration in
   [7].  It is reasonable to expect the first byte to remain under 64
   and greater than 1.  For RTP the first byte has a value that is 196
   or above.  Thus, in general, the type check specified in step (2) is
   sufficient for unambigous interpretation, and checks (3), (4), and
   (5) are merely fallbacks in case of the unlikely event that the
   headers do change enough to make this first check less than
   completely definitive.



McGrew & Rescorla      Expires September 21, 2006               [Page 7]

Internet-Draft           SRTP Extension for DTLS              March 2006


   If this procedure does not result in a successful verification and
   reception, the datagram SHOULD be silently discarded.  For testing
   and debugging purposes it MAY be desirable to generate an
   "invalid_MAC" alert, as specified in Section 4.1.2.1 of [4].

3.6.  Rehandshake and Re-key

   Rekeying in DTLS is accomplished by performing a new handshake over
   the existing DTLS channel.  This handshake can be performed in
   parallel with data transport, so no interruption of the data flow is
   required.  Once the handshake is finished, all records, including
   application_data records, simply switch over to the new keys.

   Because of packet reordering, data from the previous association can
   appear on the wire after the handshake has completed.  This means
   that receivers must maintain both sets of keys for some time in order
   to be able to decrypt and verify older data records.  In the ordinary
   DTLS record layer, this is accomplished by having an "epoch" value in
   each record that indicates which handshake the record is from.
   However, no such explicit field is present in SRTP.

   One approach would be to simply place the DTLS epoch value in the
   Master Key Identifier, but this would add two bytes to every packet,
   which seems undesirable, given that rekeying is an infrequent event.
   Instead, we propose adapting the rollover counter management
   algorithm of Section 3.3.1 of RFC 3711.  When a handshake has just
   been performed (during the MSL period after the handshake), the
   implementation SHOULD retain the pre-handshake set of keys.  When a
   new packet arrives, it should try decrypting/authenticating with both
   sets of keys (using the sequence number to guess which key to try
   first).  If either set succeeds, it should pass on the packet,
   otherwise it should be rejected.  Once the MSL has expired, the
   previous keys can be discarded.  This algorithm is easily extensible
   to the case where several handshakes happen in close succession, but
   such practice is NOT RECOMMENDED.


4.  Security Considerations

   The use of multiple data protection framings negotiated in the same
   handshake creates some complexities, which are discussed here.

4.1.  Security of Negotiation

   One concern here is that attackers might be able to implement a bid-
   down attack forcing the peers to use ordinary DTLS rather than SRTP.
   However, because the negotiation of this extension is performed in
   the DTLS handshake, it is protected by the Finished messages.



McGrew & Rescorla      Expires September 21, 2006               [Page 8]

Internet-Draft           SRTP Extension for DTLS              March 2006


   Therefore, any bid-down attack is automatically detected, which
   reduces this to a denial of service attack--which any attacker who
   can control the channel can always mount.

4.2.  Security of Established Keys

   [TODO:  David, can you say something about NIST, the PRF, etc...?]

4.3.  Framing Confusion

   Because two different framing formats are used, there is concern that
   an attacker could convince the receiver to treat an SRTP-framed RTP
   packet as a DTLS record (e.g., a handshake message) or vice versa.
   This attack is prevented by using different keys for MAC verification
   for each type of data.  Therefore, this type of attack reduces to
   being able to forge a packet with a valid MAC, which violates a basic
   security invariant of both DTLS and SRTP.

   As an additional defense against injection into the DTLS handshake
   channel, the DTLS record type is included in the MAC.  Therefore, an
   SRTP record would be treated as an unknown type and ignored.  (See
   Section 6 of [7]).

4.4.  Sequence Number Interactions

   As described in Section Section 3.5.1, the SRTP and DTLS sequence
   number spaces are distinct.  This means that it is not possible to
   unambiguously order a given DTLS control record with respect to an
   SRTP packet.  In general, this is relevant in two situations:  alerts
   and rehandshake.

4.4.1.  Alerts

   Because DTLS handshake and change_cipher_spec messages share the same
   sequence number space as alerts, they can be ordered correctly.
   Because DTLS alerts are inherently unreliable and SHOULD NOT be
   generated as a response to data packets, reliable sequencing between
   SRTP packets and DTLS alerts is not an important feature.  However,
   implementations which wish to use DTLS alerts to signal problems with
   the SRTP encoding SHOULD simply act on alerts as soon as they are
   received and assume that they refer to the temporally contiguous
   stream.  Such implementations MUST check for alert retransmission and
   discard retransmitted alerts to avoid overreacting to replay attacks.

4.4.2.  Rehandshake

   Because the rehandshake transition algorithm specified in Section
   Section 3.6 requires trying multiple sets of keys, it slightly



McGrew & Rescorla      Expires September 21, 2006               [Page 9]

Internet-Draft           SRTP Extension for DTLS              March 2006


   weakens the authentication.  For instance, if an n-bit MAC is used
   and k different sets of keys are present, then the MAC is weakened by
   log_2(k) bits to n - log_2(k).  In practice, since the number of keys
   used will be very small and the MACs in use are typically strong (the
   default for SRTP is 80 bits) the decrease in security involved here
   is minimal.

   Another concern here is that this algorithm slightly increases the
   work factor on the receiver because it needs to attempt multiple
   validations.  However, again, the number of potential keys will be
   very small (and the attacker cannot force it to be larger) and this
   technique is already used for rollover counter management, so the
   authors do not consider this to be a serious flaw.


5.  IANA Considerations

   This document a new extension for DTLS, in accordance with [8]:

         enum { use_srtp (??) } ExtensionType;

   [[ NOTE:  This value needs to be assigned by IANA ]]

   This extension MUST only be used with DTLS.


6.  Acknowledgments

   Some people.


7.  References

7.1.  Normative References

   [1]  Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson,
        "RTP: A Transport Protocol for Real-Time Applications",
        RFC 1889, January 1996.

   [2]  Bradner, S., "Key words for use in RFCs to Indicate Requirement
        Levels", BCP 14, RFC 2119, March 1997.

   [3]  Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson,
        "RTP: A Transport Protocol for Real-Time Applications", STD 64,
        RFC 3550, July 2003.

   [4]  Rescorla, E. and N. Modadugu, "Datagram Transport Layer
        Security", draft-rescorla-dtls-05 (work in progress), June 2005.



McGrew & Rescorla      Expires September 21, 2006              [Page 10]

Internet-Draft           SRTP Extension for DTLS              March 2006


   [5]  Fischl, J., "Session Initiation Protocol (SIP) for Media Over
        Datagram Transport Layer  Security (DTLS)",
        draft-fischl-sipping-media-dtls-00 (work in progress),
        March 2006.

   [6]  Fischl, J. and H. Tschofenig, "Session Description Protocol
        (SDP) Indicators for Datagram Transport Layer  Security (DTLS)",
        draft-fischl-mmusic-sdp-dtls-00 (work in progress), March 2006.

7.2.  Informational References

   [7]  Dierks, T. and E. Rescorla, "The TLS Protocol Version 1.1",
        draft-ietf-tls-rfc2246-bis-13 (work in progress), June 2005.

   [8]  Blake-Wilson, S., "Transport Layer Security (TLS) Extensions",
        draft-ietf-tls-rfc3546bis-02 (work in progress), October 2005.

   [9]  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.
        Norrman, "The Secure Real-time Transport Protocol (SRTP)",
        RFC 3711, March 2004.































McGrew & Rescorla      Expires September 21, 2006              [Page 11]

Internet-Draft           SRTP Extension for DTLS              March 2006


Authors' Addresses

   David McGrew
   Cisco Systems
   510 McCarthy Blvd.
   Milpitas, CA  95305
   USA

   Email:  mcgrew@cisco.com


   Eric Rescorla
   Network Resonance
   2483 E. Bayshore #212
   Palo Alto, CA  94303
   USA

   Email:  ekr@networkresonance.com

































McGrew & Rescorla      Expires September 21, 2006              [Page 12]

Internet-Draft           SRTP Extension for DTLS              March 2006


Intellectual Property Statement

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Disclaimer of Validity

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Copyright Statement

   Copyright (C) The Internet Society (2006).  This document is subject
   to the rights, licenses and restrictions contained in BCP 78, and
   except as set forth therein, the authors retain all their rights.


Acknowledgment

   Funding for the RFC Editor function is currently provided by the
   Internet Society.




McGrew & Rescorla      Expires September 21, 2006              [Page 13]

