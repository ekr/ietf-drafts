<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- <!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"> -->
<!-- <!ENTITY RFC2818 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2818.xml">  -->
<!-- <!ENTITY RFC5226 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml"> -->
<!-- <!ENTITY RFC5216 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5216.xml"> -->
<!-- <!ENTITY RFC3711 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3711.xml"> -->
<!-- <!ENTITY RFC4346 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4346.xml"> -->
<!-- <!ENTITY RFC5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml"> -->
<!-- <!ENTITY RFC5281 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5281.xml"> -->
<!-- <!ENTITY RFC4347 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4347.xml"> -->
<!-- <!ENTITY RFC5056 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5056.xml"> -->
<!-- <!ENTITY RFC2965 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2965.xml"> -->

<!-- <!ENTITY I-D.ietf-avt-dtls-srtp SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-avt-dtls-srtp"> -->
<!-- <!ENTITY I-D.altman-tls-channel-bindings SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.altman-tls-channel-bindings"> -->

]>
<!-- $Id -->
<?rfc inline="yes"?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc iprnotified="no" ?>
<!--<?rfc strict="yes" ?>-->
<?rfc compact="yes" ?>
<?rfc sortrefs="no" ?>
<?rfc colonspace='yes' ?>
<rfc category="std" docName="draft-ietf-tls-renegotiation-03.txt" ipr="pre5378Trust200902" updates="RFCs 5246, 4366, 4347, 4346, 2246">
  <front>
    <title abbrev="TLS Renegotiation Extension">Transport Layer Security (TLS) Renegotiation Indication Extension</title>

    <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
      <organization>RTFM, Inc.</organization>

      <address>
	<postal>
	  <street>2064 Edgewood Drive</street>

	  <city>Palo Alto</city>

	  <region>CA</region>

	  <code>94303</code>

	  <country>USA</country>
	</postal>

	<email>ekr@rtfm.com</email>
      </address>
    </author>


    <author fullname="Marsh Ray" initials="M." surname="Ray">
      <organization>PhoneFactor</organization>

      <address>
	<postal>
	  <street>7301 W 129th Street</street>

	  <city>Overland Park</city>

	  <region>KS</region>

	  <code>66213</code>

	  <country>USA</country>
	</postal>

	<email>marsh@extendedsubset.com</email>
      </address>
    </author>

    <author fullname="Steve Dispensa" initials="S." surname="Dispensa">
      <organization>PhoneFactor</organization>

      <address>
	<postal>
	  <street>7301 W 129th Street</street>

	  <city>Overland Park</city>

	  <region>KS</region>

	  <code>66213</code>

	  <country>USA</country>
	</postal>

	<email>dispensa@phonefactor.com</email>
      </address>
    </author>


    <author fullname="Nasko Oskov" initials="N." surname="Oskov">
      <organization>Microsoft</organization>

      <address>
	<postal>
	  <street>One Microsoft Way</street>

	  <city>Redmond</city>

	  <region>WA</region>

	  <code>98052</code>

	  <country>USA</country>
	</postal>

	<email>nasko.oskov@microsoft.com</email>
      </address>
    </author>

    <date day="21" month="December" year="2009" />

    <abstract>
      <t>SSL and TLS renegotiation are vulnerable to an attack in
      which the attacker forms a TLS connection with the target
      server, injects content of his choice, and then splices
      in a new TLS connection from a client. The server treats
      the client's initial TLS handshake as a renegotiation and
      thus believes that the initial data transmitted by the
      attacker is from the same entity as the subsequent client
      data. This specification defines a TLS extension to cryptographically
      tie renegotiations to the TLS connections they are being
      performed over, thus preventing this attack.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>
	TLS <xref target="RFC5246"/>
	allows either the client or the server to initiate renegotiation--a
	new handshake which establishes new cryptographic parameters. Unfortunately,
	although the new handshake is carried out using the cryptographic
	parameters
	established by the original handshake, there is no cryptographic
	connection between the two. This creates the opportunity for an
	attack in which the attacker who can intercept a client's transport
	layer connection can inject traffic of his own as a prefix to the
	client's interaction with the server. The attack 
	<xref target="Ray09"/> proceeds as shown 
	below:
      </t>
      <figure>
	<artwork><![CDATA[	
Client                        Attacker                        Server
------                        -------                         ------
<----------- Handshake ---------->
<======= Initial Traffic ========>
<--------------------------  Handshake ============================>
<======================== Client Traffic ==========================>
	]]></artwork>
      </figure>
      <t>
	To start the attack, the attacker forms a TLS connection to the server
	(perhaps in response to an initial intercepted connection from the
	client). He then sends any traffic of his choice to the server. 
	This may involve multiple requests and responses at the application
	layer, or may simply be a partial application layer request intended
	to prefix the client's data. This traffic is shown with == to indicate
	it is encrypted. He then allows the client's TLS handshake to proceed
	with the server. The handshake is in the clear to the attacker but encrypted
	over the attacker's TLS connection
	to the server. Once the handshake has completed,
	the client communicates with the server over the newly established
	security parameters with the server. The attacker
	cannot read this traffic, but the server believes that the initial traffic
	to and from the attacker is the same as that to and from the client.
      </t>
      <t>
	If certificate-based client authentication is used, the server will
	see a stream of bytes where the initial bytes are protected but
	unauthenticated by TLS and subsequent bytes are authenticated by TLS
	and bound to the client's certificate. In some protocols (notably
	HTTPS), no distinction is made between pre- and post-authentication
	stages and the bytes are handled uniformly, resulting in the server
	believing that the initial traffic corresponds to the authenticated
	client identity.  Even without certificate-based authentication, a
	variety of attacks may be possible in which the attacker convinces the
	server to accept data from it as data from the client. For instance,
	if HTTPS <xref target="RFC2818"/> is in use with HTTP cookies <xref
	target="RFC2965"/>
	the attacker may be able to generate a request of his choice validated
	by the client's cookie.
      </t>
      <t>
	Some protocols--such as IMAP or SMTP--have more explicit transitions
	between authenticated and unauthenticated phases and require that the
	protocol state machine be partly or fully reset at such transitions.
	If strictly followed, these rules may limit the effect of attacks.
	Unfortunately, there is no requirement for state machine resets at TLS
	renegotiation and thus there is still a potential window of
	vulnerability, for instance by prefixing a command which writes
	to an area visible by the attacker with a command by the
	client that includes his password, thus making the client's
	password visible to the attacker (note that this precise attack
	does not work
	with challenge-response authentication schemes but other attacks
	may be possible). Similar attacks are
	available with SMTP and in fact do not necessarily require the
	attacker to have an account on the target server.
      </t>
      <t>
	It is important to note that in both cases these attacks are possible
	because the client sends unsolicited authentication information
	without requiring any specific data from the server over the TLS
	connection.
	Protocols which require a round trip to the server over 
	TLS before the client sends sensitive information are likely
	to be less vulnerable.
      </t>
      <t>
	These attacks can be prevented by cryptographically binding renegotiation
	handshakes to the enclosing TLS cryptographic parameters,
	thus allowing the server to
	differentiate renegotiation from initial negotiation, as well as 
	preventing renegotiations from being spliced in between connections.
	An attempt by an attacker to inject himself as described above
	will result in a mismatch of the cryptographic binding and can thus be 
	detected. The data used in the extension is similar to, but not the same as,
	the date used in the tls-unique and/or tls-unique-for-telnet channel bindings
	described in 
	<xref target="I-D.altman-tls-channel-bindings"/>, however this
	extension is not a general-purpose RFC 5056 
	<xref target="RFC5056"/> channel binding
	facility."
      </t>
    </section>
    <section title="Conventions Used In This Document">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>
    </section>

    <section title="Secure Renegotiation Definition" anchor="sec.reneg-defn">
      <section title="Additional Connection State">
	<t>
	  Both client and server need to store three additional values for
	  each TLS connection state (see RFC 5246, Section 6.1). Note
	  that these values are specific to connection (not a TLS
	  session cache entry).
	</t>
	<t>
	  <list style="symbols">
	    <t>a "secure_renegotiation" flag, indicating whether secure
	    renegotiation is in use for this connection.
	    </t>
	    
	    <t>
	      "client_verify_data": the verify_data from the Finished message
	      sent by the client on the immediately previous handshake.  For
	      currently defined TLS versions and cipher suites,
	      this will be a 12-byte value; for SSLv3, this will be a 36-byte
	      value.
	    </t>
	    
	    <t>
	      "server_verify_data": the verify_data from the Finished message
	      sent by the server on the immediately previous handshake.
	    </t>
	  </list>
	</t>
      </section>
      <section title="Extension Definition" anchor="sec.ext-def">
	<t>
	  This document defines a new TLS extension:  "renegotiation_info",
	  which contains a cryptographic binding to the enclosing TLS
	  connection (if any) for which the renegotiation is being performed.
	  The "extension data" field of this extension contains a
	  "RenegotiationInfo" structure:
	</t>
	<figure>
	  <artwork><![CDATA[	
	  struct {
	  opaque renegotiated_connection<0..255>;
	  } Renegotiation_Info;
	  ]]></artwork>
	</figure>
	<t>
	  The contents of this extension are specified as follows.
	</t>
	<t>
	  <list style="symbols">
	    <t>If this is the initial handshake for a connection, then 
	    the "renegotiated_connection" field is of zero length in both the ClientHello and the
	    ServerHello. Thus, the entire encoding of the extension is:
	    ff 01 00 01 00. The first two octets represent the extension
	    type, the third and fourth octet the length of the extension
	    itself, and the final octet the zero length byte for
	    the "renegotiated_connection" field.
	    </t>

	    <t>For ClientHellos which are renegotiating, this field contains
	    the "client_verify_data" specified in <xref target="sec.ext-def"/>.
	    </t>

	    <t>For ServerHellos which are renegotiating, this field contains
	    the concatenation of client_verify_data and server_verify_data.
	    For current versions of TLS, this will be a 24-byte value
	    (for SSLv3, it will be a 72-byte value).
	    </t>
	  </list>

	</t>
	<t>
	  This extension also can be used with Datagram TLS <xref target="RFC4347"/>.
	  Although for editorial simplicity this document refers to TLS,
	  all requirements in this document apply equally to DTLS.
	</t>
      </section>
      <section title="Renegotiation Protection Request Signalling Cipher Suite Value">
	<t>
	  Both the SSLv3 and TLS 1.0/TLS 1.1 specifications require
	  implementations to ignore data following the ClientHello (i.e.,
	  extensions) if they do not understand it. However, some SSLv3 and
	  TLS 1.0 implementations incorrectly fail the handshake in such
	  case. This means that clients which offer "renegotiation_info" may find 
	  handshake failures. In order to enhance compatibility with such
	  servers, this document defines a second	signalling mechanism
	  via a special signalling cipher suite value (SCSV) "TLS_RENEGO_PROTECTION_REQUEST",
	  with code point 0xNN, 0xMM. This SCSV is not a true cipher suite 
	  and cannot be negotiated. Instead it has the same semantics as
	  an empty "renegotiation_info" extension, as described in the following
	  sections.
	  Because SSLv3 and TLS implementations reliably ignore unknown
	  cipher suites, the SCSV may be safely sent to any server.
	</t>
	<t>
	  Note: a minimal client which does not support
	  renegotiation at all can simply use the SCSV in all initial
	  handshakes. The rules in the following sections will
	  cause any compliant server to abort the handshake when
	  it sees an apparent attempt at renegotiation by such a client.
	</t>
      </section>
      
      <section title="Client Behavior: Initial Handshake" anchor="sec.client-initial">
	<t>
	  Note that this section and <xref target="sec.client-reneg"/>
	  apply to both full handshakes and session resumption handshakes.
	</t>
	<t>
	  <list style="symbols">
	    <t>
	      The client MUST include either an empty "renegotiation_info"
	      extension, or the TLS_RENEGO_PROTECTION_REQUEST signalling
	      cipher suite value in
	      every ClientHello. Including both is NOT RECOMMENDED.
	    </t>
	    <t>
	      When ServerHello is received, the client MUST check if it
	      includes the "renegotiation_info" extension:
	      
	      <list style="symbols">
		<t>
	      If the extension is not present, the server does not support
	      secure renegotiation; set secure_renegotiation flag to FALSE.
	      In this case, some clients may want to terminate the
	      handshake instead of continuing; see 
	      <xref target="sec.client-cons"/> for discussion.
		</t>
		<t>
	      If the extension is present, set the secure_renegotiation flag
	      to TRUE. The client MUST then verify that the length of the
	      "renegotiated_connection" field is zero, and if it is not, MUST
	      abort the handshake (by sending a fatal handshake_failure
	      alert).
		</t>
		<t>
		Note: later in Section 3, "abort the handshake" is used
	      as a shorthand for "send a fatal handshake_failure alert and
	      terminate the connection".
		</t>
	      </list>
	  </t>
	    <t>
	      When the handshake has completed the client needs to save the
	      client_verify_data and server_verify_data values for future use.
	    </t>
	  </list>
	</t>
      </section>

      <section title="Client Behavior: Secure Renegotiation" anchor="sec.client-reneg">
	<t>
	  This text applies if the connection's "secure_renegotiation" flag
	  is set to TRUE (if it is set to FALSE, see <xref target="sec.client-legacy"/>).
	</t>
	<t>
	  <list style="symbols">
	    <t>
	      The client MUST include the "renegotiation_info" extension
	      in the ClientHello, containing the saved client_verify_data.
	      The SCSV MUST NOT be included.
	    </t>
	    
	    <t>
	      When ServerHello is received, the client MUST verify
	      that the "renegotiation_info" extension is present; if it is
	      not, the client MUST abort the handshake.
	    </t>
	    
	    <t>
	      The client MUST then verify that the first half of the
	      "renegotiated_connection" field is equal to the saved
	      client_verify_data value, and the second half is equal to the
	      saved server_verify_data value.  If they are not, the client
	      MUST abort the handshake.
	    </t>

	    <t>
	      When the handshake has completed, the client needs to save
	      the new client_verify_data and server_verify_data values.
	    </t>
	  </list>
	</t>
      </section>
      <section title="Server Behavior: Initial Handshake" anchor="sec.server-initial">
	<t>
	  Note that this section and <xref target="sec.server-reneg"/>
	  apply to both full handshakes and session resumption handshakes.
	</t>

	<t>
	  <list style="symbols">

	    <t>
	      When ClientHello is received, the server MUST check if
	      it includes the TLS_RENEGO_PROTECTION_REQUEST SCSV.
	      If it does, set secure_renegotiation flag to TRUE.
	    </t>

	    <t>
	      The server MUST check if the "renegotiation_info" extension
	      is included in ClientHello. If the extension is present,
	      set secure_renegotiation flag to TRUE. The server MUST then
	      verify that the length of the "renegotiated_connection" field
	      is zero, and if it is not, MUST abort the handshake.
	    </t>

	    <t>
	      If neither the TLS_RENEGO_PROTECTION_REQUEST SCSV nor
	      the "renegotiation_info" extension was included, set
	      secure_renegotiation flag to FALSE. In this case, some servers
	      may want to terminate the handshake instead of continuing;
	      see Section [TODO] for discussion.
	    </t>

	    <t>
	      If the secure_renegotation flag is set to TRUE,
	      the server MUST
	      include an empty "renegotiation_info" extension in the ServerHello
	      message.	      
	    </t>

	    <t>
	      When the handshake has completed, the server needs to save the
	      client_verify_data and server_verify_data values for future use.	      
	    </t>
	  </list>
	</t>
      </section>
      <section title="Server Behavior: Secure Renegotiation" anchor="sec.server-reneg">
	<t>
	  This text applies if the connection's "secure_renegotiation" flag
	  is set to TRUE (if it is set to FALSE, see <xref target="sec.server-legacy"/>
	</t>

	<t>
	  <list style="symbols">	
	    <t>
	      When ClientHello is received, the server MUST verify
	      that it does not contain the TLS_RENEGO_PROTECTION_REQUEST SCSV.
	      If the SCSV is present, the server MUST abort the handshake.
	    </t>

	    <t>
	      The server MUST verify that the "renegotiation_info" extension
	      is present; if it is not, the server MUST abort the handshake.
	    </t>

	    <t>
	      The server MUST verify that the value of the
	      "renegotiated_connection" field is equal to the saved
	      client_verify_data value; if it is not, the server MUST
	      abort the handshake.
	    </t>

	    <t>
	      The server MUST include a "renegotiation_info" extension
	      containing the saved client_verify_data and server_verify_data
	      in the ServerHello.
	    </t>
	    
	    <t>
	      When the handshake has completed, the server needs to save the
	      new client_verify_data and server_verify_data values.
	    </t>
	  </list>
	</t>
      </section>
    </section>
    <section title="Backward Compatibility">
      <t>
	Existing implementations which do not support this extension
	are widely deployed and in general must interoperate with
	newer implementations which do support it. This section 
	describes considerations for backward compatible interoperation.
      </t>
      <section title="Client Considerations" anchor="sec.client-cons">
	<t>
	  If a client offers the "renegotiation_info" extension or
	  the TLS_RENEGO_PROTECTION_REQUEST SCSV and the
	  server does not reply with "renegotiation_info" in the ServerHello,
	  then this indicates that the server
	  does not support secure renegotiation.
	  Because the above attack looks like a single handshake
	  to the client, the client cannot determine whether the
	  connection is under attack or not. Note, however, that merely
	  because the server does not acknowledge the extension 
	  does not mean that it is vulnerable; it might choose to 
	  reject all renegotiations and simply not signal it.
	  However, it is not possible
	  for the client to determine purely via TLS mechanisms
	  whether this is the case or not.
	</t>
	<t>
	  If clients wish to ensure that such attacks are impossible,
	  they need to terminate the connection immediately upon failure to receive
	  the extension without completing the handshake. Such clients
	  MUST generate a fatal "handshake_failure" alert prior to
	  terminating the connection.
	  However, it is expected that many TLS servers that do not support
	  renegotiation (and thus are not vulnerable) will not support this
	  extension either, so in general, clients which implement this 
	  behavior will encounter interoperability problems. There is 
	  no set of client behavior which will guarantee security and achieve
	  maximum interoperability during the transition period. Clients
	  need to choose one or the other preference when dealing with
	  potentially unupgraded servers.
	</t>
      </section>
      <section title="Client Behavior: Legacy (Insecure) Renegotation Handshake" anchor="sec.client-legacy">

	<t>
	  This text applies if the connection's "secure_renegotiation" flag
	  is set to FALSE.
	</t>

      <t>
	  It is possible that un-upgraded servers will request that the client
	  renegotiate.  It is RECOMMENDED that clients refuse this
	  renegotiation request.  Clients which do so MUST respond to such
	  requests with a "no_renegotiation" alert [RFC 5246 requires this
	  alert to be at the "warning" level.]  It is possible that the
	  apparently un-upgraded server is in fact an attacker who is then
	  allowing the client to renegotiate with a different, legitimate,
	  upgraded server.
	  If clients nevertheless choose to renegotiate, they MUST
	  behave as described below.
	</t>
	<t>
	  <list style="symbols">	
	    <t>
	      The client MUST include a "renegotiation_info" extension
	      with the contents the same as described in <xref target="sec.client-reneg"/>
	    </t>
	    
	    <t>
	      When ServerHello is received, the client MUST verify that
	      it does not contain the "renegotiation_info" extension.
	      If it does, the client MUST abort the handshake.
	      [Because the server has already indicated it does not
	      support secure renegotiation
	      the only way that this can happen is if the server
	      is broken or there is an attack.]
	    </t>
	  </list>
	</t>
      </section>
      <section title="Server Considerations">
	<t>
	  If the client does not offer the "renegotiation_info" extension
	  or the TLS_RENEGO_PROTECTION_REQUEST SCSV
	  then this indicates that the client does not support secure
	  renegotiation or is unwilling to use it. However, because the above attack
	  looks like two handshakes to the server, the server can safely
	  continue the connection as long as it does not allow the client
	  to renegotiate. If servers wish to ensure that such attacks are
	  impossible they need to refuse to renegotiate with clients
	  which do not offer the "renegotiation_info" extension.
	  Servers which implement this behavior MUST respond to such requests with a 
	  "no_renegotiation" alert [RFC 5246 requires this alert to be
	  at the "warning" level.] Servers SHOULD follow this behavior.
	</t>
	<t>
	  In order to enable clients to probe, even servers which do not
	  support renegotiation MUST implement the minimal version
	  of the extension described in this document for initial
	  handshakes, thus signalling that they have been upgraded.
	</t>
      </section>
      <section title="Server Behavior: Legacy (Insecure) Renegotiation" anchor="sec.server-legacy">
	<t>
	  This text applies if the connection's "secure_renegotiation" flag
	  is set to FALSE.
	</t>
	<t>
	  It is RECOMMENDED that servers not permit legacy renegotiation.
	  If servers nevertheless do permit it, they MUST follow the requirements
	  in this section.
	</t>

	<list style="symbols">	
	  <t> 
	    When ClientHello is received, the server MUST verify
	    that it does not contain the TLS_RENEGO_PROTECTION_REQUEST SCSV.
	    If the SCSV is present, the server MUST abort the handshake.
	  </t>

	  <t>
	    The server MUST verify that the "renegotiation_info" extension
	    is not present; if it is, the server MUST abort the handshake.
	  </t>
	</list>
      </section>
      <section title="SSLv3">
	<t>
	  While SSLv3 is not a protocol under IETF change control, 
	  it was the original basis for TLS and most TLS stacks are 
	  also SSLv3 stacks. The SCSV and extension defined in this
	  document can also be used with SSLv3 with no changes 
	  except for the size of the verify_data values, which are
	  are 36 bytes long each. TLS Clients which support SSLv3 and
	  offer secure
	  renegotiation (either via SCSV or "renegotiation_info") MUST 
	  accept the "renegotiation_info" extension from
	  the server even if the server version is {0x03, 0x00}
	  and behave as described in this specification.
	  TLS Servers which support secure renegotation and
	  support SSLv3 MUST accept
	  SCSV or the "renegotiation_info" extension and respond
	  as described in this specification even if the
	  offered client version is {0x03, 0x00}.
	</t>
      </section>
    </section>
    <section title="Security Considerations" anchor="sec.sec-cons">
      <t>
	The extension described in this document prevents an attack on
	TLS. If this extension is not used, TLS renegotiation is subject
	to an attack in which the attacker can inject their own conversation
	with the TLS server as a prefix of the client's conversation.
	This attack is invisible to the client and looks like an ordinary
	renegotiation to the server. The extension defined in this
	document allows renegotiation to be performed safely. 
	Servers SHOULD NOT allow clients to renegotiate without
	using this extension. Many servers can mitigate this attack
	simply by refusing to renegotiate at all.
      </t>
      <t>
	While this extension mitigates the man-in-the-middle attack
	described in the overview, it does not resolve all possible
	problems an application may face if it is unaware of renegotiation.
	It is possible that the authenticated identity of the server or
	client may change as a result of renegotiation.
      </t>
      <t>
	[TODO: This section still needs to be adjusted to match
	the WG discussion.]
	By default, TLS implementations conforming to this document MUST
	verify that once the peer has been identified and authenticated within
	the TLS handshake, the identity does not change on subsequent
	renegotiations.	For
	certificate based cipher suites, this means bitwise equality of the
	end-entity certificate.  If the other end attempts to authenticate
	with a different identity, the renegotiation MUST fail.  If the
	server_name extension is used, it MUST NOT change when doing
	renegotiation.
      </t>
      <t>
	A TLS library MAY provide a means for the application to allow
	identity and/or server_name changes across renegotiations, in which
	case the application is responsible for tracking the identity
	associated with data it is processing.  This may require additional
	API facilities in the TLS library.
      </t>
    </section>
    <section title="IANA Considerations">
      <t>
	IANA [shall add/has added] the extension code point
	XXX [We request 0xff01, which has been used for
	prototype implementations] for the "renegotiation_info" extension
	to the TLS ExtensionType values registry.
      </t>
      <t>
	IANA [shall add/has added] TLS cipher suite number 0xNN,0xMM
	[We request 0x00, 0xff]
	with name TLS_RENEGO_PROTECTION_REQUEST to the TLS Cipher Suite registry.
      </t>
    </section>
    <section title="Acknowledgements">
      <t>
	This vulnerability was originally discovered by Marsh Ray.
	The general concept behind the 
	extension described here was independently invented by
	Steve Dispensa, Nasko Oskov, and Eric Rescorla with
	refinements from Nelson Bolyard, Pasi Eronen, Michael D'Errico, 
	Stephen Farrell, Michael Gray, 
	David-Sarah Hopwood, Ben Laurie, Bodo Moeller,
	Martin Rex (who defined TLS_RENEGO_PROTECTION_REQUEST),
	Peter Robinson, 
	Jesse Walker, Nico Williams and other members of the
	the Project Mogul team and the TLS WG. 
	[Note: if you think your name should be here, please speak up.]
      </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;
      &RFC5246;
    </references>
    <references title="Informative References">
      <!--      &RFC5216;-->
      &RFC4347;
      &RFC5056;
      &I-D.altman-tls-channel-bindings;
      &RFC2818;
      &RFC2965;

      <reference anchor="Ray09">
	<front>
	  <title>Authentication Gap in TLS Renegotiation</title>
	  <author initials="M." surname="Ray" fullname="M. Ray"/>
	</front>
	<date month="November" year="2009"/>
	<url>http://extendedsubset.com/?p=8</url>
      </reference>

      <!--      &I-D.ietf-avt-dtls-srtp; -->
    </references> 
  </back>
</rfc>
<!-- Keep this comment at the end of the file
     Local variables:
     mode: xml
     sgml-omittag:nil
     sgml-shorttag:nil
     sgml-namecase-general:nil
     sgml-general-insert-case:lower
     sgml-minimize-attributes:nil
     sgml-always-quote-attributes:t
     sgml-indent-step:2
     sgml-indent-data:nil
     sgml-parent-document:nil
     sgml-exposed-tags:nil
     sgml-local-catalogs:nil
     sgml-local-ecat-files:nil
     End:
-->


<!--


PASI:

- Whether to prohibit sending the extension (in initial ClientHello),
or require the magic cipher suite even if the extension is sent (in
initial ClientHello): The consensus is again a bit rougher than we'd
normally hope to see, but the current text (either is allowed) has
more support (about 2/3 vs. 1/3), so we keep it. And again, I believe
most participants prefer make some decision over continuing the
discussion.

- There was some discussion on whether to add the magic cipher suite
to patched renegotiation ClientHellos (in addition to the extension),
too. I believe rough consensus is not to do this.

- The current draft doesn't clearly say what should be included in
legacy (insecure) renegotiation ClientHellos. I am not sure if we have
enough clear opinions to call consensus, but keeping it aligned with
the initial ClientHello (either MSCV or extension) seems to be one
simple approach (but I hope to see the actual text).

- Yngve Pettersen proposed explicitly saying that servers that
implement this draft must be extension-tolerant (not break if the
client sends extensions) and version-tolerant (not break if the client
proposes a higher version number than the server supports).  It seems
these are not new requirements, so this would be an editorial
clarification (but being very clear doesn't hurt).

- Yngve also proposed adding requirements/recommendations about
fall-back/reconnection procedures (to extension-less handshake, or
earlier versions). I think the rough consensus is that the document
should not mandate or even recommend anything about such
fall-back/reconnection procedures (which are mostly not related to
renegotiation anyway).







> Just one thought, which is really off-topic for the draft: Would it be  
> worthwhile (and acceptable) to add a reminder to implementors about the  
> selection of version in the handshake and that the server have to handle  
> clients that offer a higher version than the server supports? That is  
> supposed to prevent a version rollback attack if there is a problem with  
> an older version, so I think it might be useful to reiterate the good  
> security policies that can't be directly enforced by the crypto in the  
> prootocol.





7. Clarify that RI MUST be generated in all rehandshakes, per the
issue Martin raised earlier and proposed resolution by Marsh
and Nelson.

9. Rewrite the section about identity changes in Security Considerations.
I'll propose new text on the list.





Clients that wish to be compatible with the maximum number of older
servers (including SSLv3 servers not supporting TLS), SHOULD signal
using the special TLS cipher suite value rather than including an
extension on the initial Client Hello. (Note that this does not apply to
any subsequent Client Hello messages sent.) Any such client MUST be
prepared to receive in response a Server Hello message of any negotiable
version (subject to the usual rules) which contains the extension.
Clients are not required to offer support back to SSLv3, but if they do,
they MUST implement the behaviors described in this specification.




-->

